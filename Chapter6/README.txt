In Chapter 6, I used inheritance to factor the common methods and data in the LinkedBag and ArrayBag classes into an AbstractBag super class. In this structure, the concrete classes still implement the bag interface from Chapter5, but they inherit common methods and data from the AbstractBag class. Furthermore, I factored some data and methods common to all collections, such as self.length and __len__, into an AbstractCollection class. Now, abstract classes for specific collections, such as AbstractBag, can inherit from the AbstractCollection class. The process of factoring common methods and data into abstract super classes reduces redundancy in implementations. Abstract classes, like interfaces, are not meant to be instantiated. However, unlike interfaces, abstract classes do contain implementation code. That being said, they are not complete.
